// Generated by gencpp from file gripper_besturing/gripperServiceMessageRequest.msg
// DO NOT EDIT!


#ifndef GRIPPER_BESTURING_MESSAGE_GRIPPERSERVICEMESSAGEREQUEST_H
#define GRIPPER_BESTURING_MESSAGE_GRIPPERSERVICEMESSAGEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gripper_besturing
{
template <class ContainerAllocator>
struct gripperServiceMessageRequest_
{
  typedef gripperServiceMessageRequest_<ContainerAllocator> Type;

  gripperServiceMessageRequest_()
    : open_of_dicht_gripper()
    , gripper_opstarten(0)  {
    }
  gripperServiceMessageRequest_(const ContainerAllocator& _alloc)
    : open_of_dicht_gripper(_alloc)
    , gripper_opstarten(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _open_of_dicht_gripper_type;
  _open_of_dicht_gripper_type open_of_dicht_gripper;

   typedef int64_t _gripper_opstarten_type;
  _gripper_opstarten_type gripper_opstarten;





  typedef boost::shared_ptr< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct gripperServiceMessageRequest_

typedef ::gripper_besturing::gripperServiceMessageRequest_<std::allocator<void> > gripperServiceMessageRequest;

typedef boost::shared_ptr< ::gripper_besturing::gripperServiceMessageRequest > gripperServiceMessageRequestPtr;
typedef boost::shared_ptr< ::gripper_besturing::gripperServiceMessageRequest const> gripperServiceMessageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator1> & lhs, const ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator2> & rhs)
{
  return lhs.open_of_dicht_gripper == rhs.open_of_dicht_gripper &&
    lhs.gripper_opstarten == rhs.gripper_opstarten;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator1> & lhs, const ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gripper_besturing

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16ddae6f8940a74cb7096922bee88c8e";
  }

  static const char* value(const ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16ddae6f8940a74cULL;
  static const uint64_t static_value2 = 0xb7096922bee88c8eULL;
};

template<class ContainerAllocator>
struct DataType< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gripper_besturing/gripperServiceMessageRequest";
  }

  static const char* value(const ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string open_of_dicht_gripper\n"
"int64 gripper_opstarten\n"
;
  }

  static const char* value(const ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.open_of_dicht_gripper);
      stream.next(m.gripper_opstarten);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gripperServiceMessageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gripper_besturing::gripperServiceMessageRequest_<ContainerAllocator>& v)
  {
    s << indent << "open_of_dicht_gripper: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.open_of_dicht_gripper);
    s << indent << "gripper_opstarten: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gripper_opstarten);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRIPPER_BESTURING_MESSAGE_GRIPPERSERVICEMESSAGEREQUEST_H
