// Generated by gencpp from file hmi/HMI_state.msg
// DO NOT EDIT!


#ifndef HMI_MESSAGE_HMI_STATE_H
#define HMI_MESSAGE_HMI_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hmi
{
template <class ContainerAllocator>
struct HMI_state_
{
  typedef HMI_state_<ContainerAllocator> Type;

  HMI_state_()
    : programstate()
    , programtype()
    , buttontype(0)  {
    }
  HMI_state_(const ContainerAllocator& _alloc)
    : programstate(_alloc)
    , programtype(_alloc)
    , buttontype(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _programstate_type;
  _programstate_type programstate;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _programtype_type;
  _programtype_type programtype;

   typedef uint8_t _buttontype_type;
  _buttontype_type buttontype;





  typedef boost::shared_ptr< ::hmi::HMI_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hmi::HMI_state_<ContainerAllocator> const> ConstPtr;

}; // struct HMI_state_

typedef ::hmi::HMI_state_<std::allocator<void> > HMI_state;

typedef boost::shared_ptr< ::hmi::HMI_state > HMI_statePtr;
typedef boost::shared_ptr< ::hmi::HMI_state const> HMI_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hmi::HMI_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hmi::HMI_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hmi::HMI_state_<ContainerAllocator1> & lhs, const ::hmi::HMI_state_<ContainerAllocator2> & rhs)
{
  return lhs.programstate == rhs.programstate &&
    lhs.programtype == rhs.programtype &&
    lhs.buttontype == rhs.buttontype;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hmi::HMI_state_<ContainerAllocator1> & lhs, const ::hmi::HMI_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hmi

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hmi::HMI_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hmi::HMI_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmi::HMI_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmi::HMI_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmi::HMI_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmi::HMI_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hmi::HMI_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d05be62867557efe2359be0b2c4cb496";
  }

  static const char* value(const ::hmi::HMI_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd05be62867557efeULL;
  static const uint64_t static_value2 = 0x2359be0b2c4cb496ULL;
};

template<class ContainerAllocator>
struct DataType< ::hmi::HMI_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hmi/HMI_state";
  }

  static const char* value(const ::hmi::HMI_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hmi::HMI_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string programstate\n"
"string programtype\n"
"uint8 buttontype\n"
;
  }

  static const char* value(const ::hmi::HMI_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hmi::HMI_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.programstate);
      stream.next(m.programtype);
      stream.next(m.buttontype);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HMI_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hmi::HMI_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hmi::HMI_state_<ContainerAllocator>& v)
  {
    s << indent << "programstate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.programstate);
    s << indent << "programtype: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.programtype);
    s << indent << "buttontype: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buttontype);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HMI_MESSAGE_HMI_STATE_H
