// Generated by gencpp from file manipulator_groep_1/control_robotGoal.msg
// DO NOT EDIT!


#ifndef MANIPULATOR_GROEP_1_MESSAGE_CONTROL_ROBOTGOAL_H
#define MANIPULATOR_GROEP_1_MESSAGE_CONTROL_ROBOTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <std_msgs/String.h>
#include <std_msgs/Bool.h>

namespace manipulator_groep_1
{
template <class ContainerAllocator>
struct control_robotGoal_
{
  typedef control_robotGoal_<ContainerAllocator> Type;

  control_robotGoal_()
    : lineairpose()
    , position()
    , mode()  {
    }
  control_robotGoal_(const ContainerAllocator& _alloc)
    : lineairpose(_alloc)
    , position(_alloc)
    , mode(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _lineairpose_type;
  _lineairpose_type lineairpose;

   typedef  ::std_msgs::String_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> const> ConstPtr;

}; // struct control_robotGoal_

typedef ::manipulator_groep_1::control_robotGoal_<std::allocator<void> > control_robotGoal;

typedef boost::shared_ptr< ::manipulator_groep_1::control_robotGoal > control_robotGoalPtr;
typedef boost::shared_ptr< ::manipulator_groep_1::control_robotGoal const> control_robotGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::manipulator_groep_1::control_robotGoal_<ContainerAllocator1> & lhs, const ::manipulator_groep_1::control_robotGoal_<ContainerAllocator2> & rhs)
{
  return lhs.lineairpose == rhs.lineairpose &&
    lhs.position == rhs.position &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::manipulator_groep_1::control_robotGoal_<ContainerAllocator1> & lhs, const ::manipulator_groep_1::control_robotGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace manipulator_groep_1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e36f01127625ad1eec9d70ff2f265799";
  }

  static const char* value(const ::manipulator_groep_1::control_robotGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe36f01127625ad1eULL;
  static const uint64_t static_value2 = 0xec9d70ff2f265799ULL;
};

template<class ContainerAllocator>
struct DataType< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "manipulator_groep_1/control_robotGoal";
  }

  static const char* value(const ::manipulator_groep_1::control_robotGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal\n"
"\n"
"geometry_msgs/Pose lineairpose\n"
"\n"
"std_msgs/String position\n"
"\n"
"std_msgs/Bool mode\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::manipulator_groep_1::control_robotGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lineairpose);
      stream.next(m.position);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct control_robotGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manipulator_groep_1::control_robotGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::manipulator_groep_1::control_robotGoal_<ContainerAllocator>& v)
  {
    s << indent << "lineairpose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.lineairpose);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "mode: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MANIPULATOR_GROEP_1_MESSAGE_CONTROL_ROBOTGOAL_H
