// Generated by gencpp from file vision_message/vision_msg.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_MESSAGE_VISION_MSG_H
#define VISION_MESSAGE_MESSAGE_VISION_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <std_msgs/String.h>

namespace vision_message
{
template <class ContainerAllocator>
struct vision_msg_
{
  typedef vision_msg_<ContainerAllocator> Type;

  vision_msg_()
    : vision_positie()
    , object_naam()  {
    }
  vision_msg_(const ContainerAllocator& _alloc)
    : vision_positie(_alloc)
    , object_naam(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _vision_positie_type;
  _vision_positie_type vision_positie;

   typedef  ::std_msgs::String_<ContainerAllocator>  _object_naam_type;
  _object_naam_type object_naam;





  typedef boost::shared_ptr< ::vision_message::vision_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_message::vision_msg_<ContainerAllocator> const> ConstPtr;

}; // struct vision_msg_

typedef ::vision_message::vision_msg_<std::allocator<void> > vision_msg;

typedef boost::shared_ptr< ::vision_message::vision_msg > vision_msgPtr;
typedef boost::shared_ptr< ::vision_message::vision_msg const> vision_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_message::vision_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_message::vision_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_message::vision_msg_<ContainerAllocator1> & lhs, const ::vision_message::vision_msg_<ContainerAllocator2> & rhs)
{
  return lhs.vision_positie == rhs.vision_positie &&
    lhs.object_naam == rhs.object_naam;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_message::vision_msg_<ContainerAllocator1> & lhs, const ::vision_message::vision_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_message

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vision_message::vision_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_message::vision_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_message::vision_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_message::vision_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_message::vision_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_message::vision_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_message::vision_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52237def187f2c19b70d40056e5fd89f";
  }

  static const char* value(const ::vision_message::vision_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52237def187f2c19ULL;
  static const uint64_t static_value2 = 0xb70d40056e5fd89fULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_message::vision_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_message/vision_msg";
  }

  static const char* value(const ::vision_message::vision_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_message::vision_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose vision_positie\n"
"std_msgs/String object_naam\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::vision_message::vision_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_message::vision_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vision_positie);
      stream.next(m.object_naam);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vision_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_message::vision_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_message::vision_msg_<ContainerAllocator>& v)
  {
    s << indent << "vision_positie: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.vision_positie);
    s << indent << "object_naam: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.object_naam);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_MESSAGE_VISION_MSG_H
